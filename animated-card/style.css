/* finished the video at timing the animations */

:root {
  --clr-neutral-900: hsl(207, 19%, 9%);
  --clr-neutral-100: #DD9069;
  --clr-accent-400: #748E54;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  display: grid;
  min-height: 100vh;
  place-items: center;
  line-height: 1.6;
  background: #1C3636;
  font-family: sans-serif;
}

.card {
  color: var(--clr-neutral-100);
  background-image: url(img/nm-img.png);
  background-size: cover;
  padding: 10rem 0 0;
  max-width: 40ch;
  border-radius: 0.5rem;
  overflow:hidden;

  transition: transform 500ms ease;
}

.card:hover,
.card:focus-within {
  transform: scale(1.05);
}

.card--content {
  /*
  padding variable measurement is locally scoped (can only be used in card
  content). It's used with calc to calculate the pseudo elements length to
  fit the content of the
  */
  --padding: 1.5rem;
  padding: var(--padding);
  background: linear-gradient(
    hsl(212 25% 12% / 0.0),
    hsl(212 25% 12% / 0.2) 5%,
    hsl(212 25% 12% / 0.4) 10%,
    hsl(212 25% 12% / 0.8) 15%,
    hsl(212 25% 12% / 1)
  );
}

@media (hover) {
  .card--content {
    transform: translateY(65%);
    transition: transform 500ms ease;
  }
  .card:hover .card--content,
  .card:focus-within .card--content {
    transform: translateY(0);
    transition-delay: 500ms;
  }

  .card:focus-within .card-content {
    transition-duration: 0ms;
  }

  .card--content > *:not(.card--title) {
    opacity: 0;
  }

  .card:hover .card--content > *:not(.card--title),
  .card:focus-within .card--content > *:not(.card--title) {
    opacity: 1;
  }

  .card--title::after {
    transform: scaleX(0);
  }
}

.card--title {
  /*
  max content is used so the pseudo element is the same size as the content,
  if the text wraps over one line this will break. max-width: 100%; should work
  as a substitute in that case, but I like experimenting with new values.
  */
  width: max-content;
  position: relative;
}

.card--title::after {
  content: "";
  position: absolute;
  height: 4px;
  left: calc(var(--padding) * -1);
  bottom: 0;
  width: calc(100% + var(--padding));
  background: var(--clr-accent-400);
  transform-origin: left;

  transition: transform 500ms ease;
}

.card:hover .card--title::after,
.card:focus-within .card--title::after {
  /*
  this selector selects the pseudo element on hover. the declaration gives
  the horizontal line a point to animate and transition to.
  */
  transform: scaleX(1);
}

.card--body {
  color: var(--clr-neutral-100);
  font-weight: 600;
  letter-spacing: 0.5px;
}

.card--buttons {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.button {
  cursor: pointer;
  display: inline-block;
  padding: 0.5em 1.25em;
  border-radius: 0.25rem;
  border: 3px solid var(--clr-accent-400);
  background-color: var(--clr-neutral-900 / 0.5);
  color: var(--clr-accent-400);
  text-decoration: none;
  font-weight: 600;
}

.button:hover,
.button:focus {
  background-color: var(--clr-accent-400);
  color: var(--clr-neutral-900);
}

/*
  This is a media query to account for people who wish to have no
 */

@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms
    !important;
    animation-iteration-count: 1
    !important;
    scroll-behavior: auto !important;
    transition-delay: 0ms !important;
  }
}
